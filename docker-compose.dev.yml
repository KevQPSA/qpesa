version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: kcb_crypto_fiat_dev_db
      POSTGRES_USER: kcb_user
      POSTGRES_PASSWORD: kcb_password_secure
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-dev.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kcb_user -d kcb_crypto_fiat_dev_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # FastAPI Backend (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://kcb_user:kcb_password_secure@db:5432/kcb_crypto_fiat_dev_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - JWT_SECRET=dev-jwt-secret-key-32-characters-long
      - ENCRYPTION_KEY=dev-encryption-key-32-characters
      - BITCOIN_RPC_URL=http://bitcoin:bitcoin@bitcoin-node:8332
      - ETH_RPC_URL=http://ethereum-node:8545
      - TRON_RPC_URL=https://api.shasta.trongrid.io
      - MPESA_ENVIRONMENT=sandbox
      - MPESA_CONSUMER_KEY=dev-consumer-key
      - MPESA_CONSUMER_SECRET=dev-consumer-secret
      - MPESA_PASSKEY=dev-passkey
      - MPESA_BUSINESS_SHORT_CODE=174379
      - MPESA_CALLBACK_URL=http://localhost:8000
      - EXCHANGE_RATE_API_KEY=dev-api-key
      - SMS_API_KEY=dev-sms-key
      - SMS_USERNAME=dev-sms-user
      - EMAIL_SMTP_URL=smtp://dev:dev@localhost:1025
      - BTC_CONFIRMATIONS_REQUIRED=1
      - ETH_CONFIRMATIONS_REQUIRED=3
      - TRON_CONFIRMATIONS_REQUIRED=5
    volumes:
      - ./backend:/app/backend
      - /app/__pycache__
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Bitcoin Test Node (Regtest)
  bitcoin-node:
    image: ruimarinho/bitcoin-core:23
    command: >
      bitcoind
      -regtest
      -server
      -rpcuser=bitcoin
      -rpcpassword=bitcoin
      -rpcallowip=0.0.0.0/0
      -rpcbind=0.0.0.0:8332
      -fallbackfee=0.0002
      -zmqpubrawblock=tcp://0.0.0.0:28332
      -zmqpubrawtx=tcp://0.0.0.0:28333
    ports:
      - "8332:8332"
      - "28332:28332"
      - "28333:28333"
    volumes:
      - bitcoin_data:/home/bitcoin/.bitcoin
    networks:
      - app-network

  # Ethereum Test Node (Ganache)
  ethereum-node:
    image: trufflesuite/ganache:latest
    command: >
      ganache
      --host 0.0.0.0
      --port 8545
      --accounts 10
      --deterministic
      --mnemonic "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"
    ports:
      - "8545:8545"
    networks:
      - app-network

  # Test Database for Integration Tests
  test-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test_crypto_fiat_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - ./init-test.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - app-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app-network

volumes:
  db_data:
  redis_data:
  bitcoin_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
